reset;
model heuristic.mod;
data ../data/tomononlinearevery32.dat;
option solver gurobi, solution_round 3;
problem CMP: y, z, z_plus, z_minus, ObjectiveFunction, doses_to_j, positive_only;
problem PP: betas, z, z_plus, z_minus, ObjectiveFunction, doses_to_j_yparam, positive_only, Mlimits, abs_greater, abs_smaller;
let numloops := 0;
for {1..40}{
let numloops := numloops + 1;
print "----- Running now with these many loops --:";
print numloops;
# Initialize to default values
let {n in LEAVES, k in PROJECTIONS } betasparam[n,k] := 0;	# All closed
let {k in PROJECTIONS} yparam[k] := U / 2; 		     	#Mid-Intensity
let {k in PROJECTIONS} yBar[k] := yparam[k]; 		     	#Mid-Intensity for the yBar too.
let oldobj := 9999999;
let newobj := 9999999;
let PPtimekeeper := 0;
let CMPtimekeeper := 0;
let numberOfIterations := 1;
repeat {
        let oldobj := newobj;

	## PP procedure
	let timeflagold := _total_solve_time;
	solve PP;
	let proctime := _total_solve_time - timeflagold;
	#print "PP time was: ";
	#print proctime;
	let PPtimekeeper := PPtimekeeper + proctime;
	
	let {n in LEAVES, k in PROJECTIONS } betasparam [n, k] := betas[n,k];

	## CMP procedure
	let timeflagold := _total_solve_time;
	solve CMP;
	let proctime := _total_solve_time - timeflagold;
	#print "CMP time was: ";
	#print proctime;
	let CMPtimekeeper := CMPtimekeeper + proctime;

	## Y bar assignment
	let {k in PROJECTIONS} yBar[k] := 0.5 * y[k] + 0.5 * yBar[k];
	let {k in PROJECTIONS} yparam[k] := yBar[k];

	# Exit condition
	let newobj := ObjectiveFunction;
	if abs(newobj - oldobj)/oldobj < 0.01 then break;
	else let numberOfIterations := numberOfIterations + 1;
}
solve;
display PPtimekeeper;
display CMPtimekeeper;
display numberOfIterations;
}